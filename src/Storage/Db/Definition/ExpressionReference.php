<?php
/**
 * Created by Kutuzov Alexey Konstantinovich <lexus.1995@mail.ru>.
 * Author: Kutuzov Alexey Konstantinovich <lexus.1995@mail.ru>
 * Project: jungle
 * IDE: PhpStorm
 * Date: 24.01.2017
 * Time: 8:32
 */
namespace Jungle\Data\Storage\Db\Definition {
	
	/**
	 * Class ExpressionReference
	 * @package Jungle\Data\Storage\Db\Definition
	 *
	 * Помещения указателя на колонку в спец класс не случайно.
	 * Известно что требуется экранировать сущности в системе и различать
	 * Экранируемые значения(Экранируемые),
	 * Нормализуемые выражения(Колонки, Сравнения, Операторы) которые могут содержать Экранируемые значения
	 *
	 * Планируется сделать модель системы в которой есть состояния "Восприятия значений"
	 * для различных видов Подстановок и Операндов.
	 *
	 * Например значение!=выражение в Правом операнде, всегда будет восприниматься как "Экранируемые значения"
	 *      Но если мы вдруг захотели вставить в таком операнде Указатель колонки, то нужно будет обернуть её в подобное выражение
	 * Например значение!=выра
	 *
	 * Название Колонки <--> String значение
	 * Название Колонки !!!! Integer|Float значение
	 * Название Колонки !!!! Boolean значение
	 *
	 * Как можно интерпритировать строковое значение(inline) при процессинге внутри системы
	 *      INLINE ----> String значение
	 *      INLINE ----> Спецификатор Колонки
	 *      INLINE ----> Сырая SQL Конструкция
	 *      Вывод:  Строка многозначна Распознать можно
	 *              толи это String, толи Спецификатор Колонки, толи и вовсе Сырая SQL Конструкция
	 *
	 *      NULL ---> Может указывать на пропуск обработки, т.е пустое выражение не требующее подстановки
	 *      NULL ---> Значение будет сконвертированно для использования как значения БД (php-value)NULL ---> (sql-value)NULL
	 *      Вывод:  Для NULL мы можем считать, что он выставлен для игнорирования,
	 *              а можем считать что его нужно подставить в родном для БД виде
	 *
	 * Какие интерпретации значений являются однозначными, не подвержены внутренним разногласиям
	 *      Integer|Float значение
	 *      Boolean значение
	 *
	 *
	 *
	 * Массив так-же не всегда однозначен.
	 *      Индексный, может восприниваться как значения для оператора IN, и вообще для перечислений чего либо, в контекстах разных выражений
	 *      Ассоциативные массивы, в принципе могут трактоваться для условий или вообще в качестве предварительных определений.
	 *      ['column_name','=','value']
	 *      ['column_name' => 'value']
	 *      ['column_name:=' => 'value']
	 *      ['column_name:!=' => 'value']
	 *      ['column_name : IN' => ['value','...']]
	 *      ['column_name' => ['IN', ['value','...'] ] ]
	 */
	class ExpressionReference extends Expression{

		public $type = 'reference';

		public $column;

		/**
		 * ExpressionReference constructor.
		 * @param $column
		 */
		public function __construct($column){
			$this->column = $column;
		}

		/**
		 * @param DefinitionProcessor $processor
		 * @return null|string
		 */
		public function render(DefinitionProcessor $processor){
			// нужен диалект чтобы ескейпить колонку
			return $processor->columnSpecifier($this->column);
		}

	}
}

